#include<stdio.h>
#include<math.h>
// tính modulo để tìm số dư
int mod(int a, int b) {
	int r = a%b;
	return r<0 ? r + b : r;//r<0 gán r+b ngược lại gán r
}
// gán e trừ
int ganETru(int a, int b, int e) {
	if (a - b - e<0) {
		return 1;
	}
	else {
		return 0;
	}
}
// tính số mũ của số lớn p
int tinhSoMu(int a, int w) {
	int ketQua = 1;
	for (int i = 0; i<a*w; i++) {
		ketQua = ketQua * 2;
	}
	return ketQua;
}
// gán  e cộng 
int ganECong(int a, int b, int e, int w) {
	if (a + b + e >= tinhSoMu(1, w)) {
		return 1;
	}
	else {
		return 0;
	}
}
//tính c-p
int tinhCtruP(int c[], int t, int p, int w) {
	int m[1000];
	int tg;
	for (int i = t - 1; i >= 0; i--) {
		if (i == t - 1) {
			m[i] = (int)p / tinhSoMu(i, w);
			tg = p%tinhSoMu(i, w);
		}
		else {
			m[i] = tg / tinhSoMu(i, w);
			tg = p%tinhSoMu(i, w);
		}
	}
	int C[1000];
	int e = 0;
	C[0] = mod((c[0] - m[0]), tinhSoMu(1, w));
	e = ganETru(c[0], m[0], e);
	for (int i = 1; i<t; i++) {
		C[i] = mod((c[i] - m[i] - e), tinhSoMu(1, w));
		e = ganETru(c[i], m[i], e);
	}
	printf("e=%d\n", e);
	printf("mang:");
	for (int i = t - 1; i >= 0; i--) {
		printf("%d ", C[i]);
	}
	return 0;
}
//nhập W cho phần dưới
int nhapW() {
	int w;
	printf("Nhap  W(chia het 8):");
	do {
		scanf_s("%d", &w);
		if (w % 8 == 0) {
			break;
		}
		printf("nhap lai:");
	} while (1);
	return w;
}
//a[i] kiểm tra bit
int kiemTraBit() {
	int n;
	do {
		scanf_s("%d", &n);
		if (n >= 0) {
			break;
		}
		printf("Nhap Lai:");
	} while (1);
	return n;
}
// gán epsilon
int ganE(int a, int b, int e, int w) {
	if (a + b + e >= tinhSoMu(1, w)) {
		return 1;
	}
	else {
		return 0;
	}
}
void tinh(int a[], int b[], int w, int t, int p) {
	int c[1000];
	int e = 0;
	c[0] = mod((a[0] + b[0]), tinhSoMu(1, w));
	e = ganECong(a[0], b[0], e, w);
	for (int i = 1; i<t; i++) {
		c[i] = mod((a[i] + b[i] + e), tinhSoMu(1, w));
		e = ganECong(a[i], b[i], e, w);
	}
	do {
		if (e == 0) {
			printf("e=%d\n", e);
			printf("mang :");
			for (int i = t - 1; i >= 0; i--) {
				printf("%d ", c[i]);
			}
			break;
		}
		else {
			tinhCtruP(c, t, p, w);
			break;
		}
	} while (1);
}
// thuật toán 3
int main() {
	int p, m, t, w;
	printf("Nhap p");
	scanf_s("%d", &p);
	w = nhapW();
	m = ceil(log2(p));
	t = ceil((double)m / w);
	int a[1000], b[1000];
	printf("Nhap mang A:\n");
	for (int i = t - 1; i >= 0; i--) {
		printf("a[%d]= ", i);
		a[i] = kiemTraBit();
	}
	printf("Nhap mang B:\n");
	for (int i = t - 1; i >= 0; i--) {
		printf("a[%d]= ", i);
		b[i] = kiemTraBit();
	}
	tinh(a, b, w, t, p);
}
